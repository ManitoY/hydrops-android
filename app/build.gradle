apply plugin: 'com.android.application'
apply plugin: 'AndResGuard'

import groovy.swing.SwingBuilder

repositories {
    jcenter()
}

String VERSION_NAME = "2.1"
int VERSION_CODE = 20170327
String build = "2"

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "com.edu.zwu.hydrops"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode VERSION_CODE
        versionName VERSION_NAME
        buildConfigField "int", "BUILD", build
        buildConfigField "String", "SCHEME", "\"zwu\""

        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
        ignoreWarnings
    }

    signingConfigs {
        release {
            storeFile file("../zwuCard")
            storePassword ""
            keyAlias "android"
            keyPassword ""
        }
    }

    sourceSets {
        main() {
            jniLibs.srcDirs = ['libs']
        }
    }

    allprojects {
        repositories {
            maven { url "https://jitpack.io" }
        }
    }

    lintOptions {
        abortOnError false
        ignoreWarnings
    }

    buildTypes {
        def RELEASE = "RELEASE"
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        debug {
            buildConfigField BOOLEAN, RELEASE, FALSE
        }
        release {
            buildConfigField BOOLEAN, RELEASE, TRUE
            proguardFile file("proguard-rules.pro")
            signingConfig signingConfigs.release
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
        }
    }

    productFlavors {
        zwu {
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.2.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    compile 'com.github.chrisbanes:PhotoView:1.2.6'
    compile 'com.kogitune:pre-lollipop-activity-transition:1.3.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile project(':libraries:jpush')
    compile project(':libraries:charts')
    compile 'com.android.support:recyclerview-v7:23.2.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'de.greenrobot:eventbus:3.0.0-beta1'
    compile 'com.android.support:design:23.2.1'
    compile 'cn.bmob.android:bmob-sdk:3.5.0'
    compile files('libs/BaiduLBS_Android.jar')
    compile files('libs/httpmime-4.1.2.jar')
    compile files('libs/IndoorscapeAlbumPlugin.jar')
    compile 'com.jakewharton:disklrucache:2.0.2'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleZwuRelease')) {

        def pass = ''
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter password', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: "Please enter key password:")
                        input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            pass = input.password; // Set pass variable to value of input field
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
        } else {
            pass = System.console().readPassword("\nPlease enter key password: ")
            pass = new String(pass)
        }

        if (pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }

        // -----
        // Do what you need to do with pass here!
        // -----
        android.signingConfigs.release.storePassword = pass
        android.signingConfigs.release.keyPassword = pass
    } // end if has task
} // end whenReady

afterEvaluate {
    android.applicationVariants.all { variant ->
        if (variant.name.capitalize() == "ZwuRelease") {
            def output = variant.outputs.get(0).outputFile as File
            def uploadTask = tasks.create(name: "fir${variant.name.capitalize()}",
                    description: "Upload ${output} to fir.im",
                    group: "Upload", type: Exec) {
                commandLine 'fir', 'p', output.absolutePath, '-T', firApiToken
            }
            uploadTask.dependsOn variant.assemble

        }

    }
}

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    // 当你使用v2签名的时候，7zip压缩是无法生效的。
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    whiteList = [
            "R.drawable.icon"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.1'
        //path = "/usr/local/bin/7za"  --- Linux
        //path = "D:\7za\7za.exe" --- Windows
    }
}

